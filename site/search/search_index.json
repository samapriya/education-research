{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Table of Contents 8:00 AM - 9:00 AM: Introduction to Earth Science with the Planet constellation ( Joe Mascaro ). 9:00 AM - 9:30 AM: Lightning presentations, Utilizing Planet data for applications across different disciplines 9:30 AM - 10:15 AM: Planet Data 101. Planet\u2019s satellite operations, and imagery types; Browse, select and order imagery through the Planet Explorer platform ( Joe Mascaro ) 10:15 AM - 10:30 AM: Networking Break 10:30 AM - 12:00 PM: Planet API 101 ( Sam Roy ) Introduction to Data API and the Planet Client Introduction to Orders v2API and ordering Bulk data 12:00 PM - 1:00 PM: Lunch 1:00 PM -2:00 PM: Planet APIs continued ( Sam Roy ) 2-00 PM -3.00 PM: Getting started with Planet in Google Earth Engine ( Sam Roy ) Toolbox and Tutorials 3:00 PM - 3:15 PM: Networking Break 3.15 to 4 PM Question and Answers: Open Panel","title":"Training Index"},{"location":"#table-of-contents","text":"8:00 AM - 9:00 AM: Introduction to Earth Science with the Planet constellation ( Joe Mascaro ). 9:00 AM - 9:30 AM: Lightning presentations, Utilizing Planet data for applications across different disciplines 9:30 AM - 10:15 AM: Planet Data 101. Planet\u2019s satellite operations, and imagery types; Browse, select and order imagery through the Planet Explorer platform ( Joe Mascaro ) 10:15 AM - 10:30 AM: Networking Break 10:30 AM - 12:00 PM: Planet API 101 ( Sam Roy ) Introduction to Data API and the Planet Client Introduction to Orders v2API and ordering Bulk data 12:00 PM - 1:00 PM: Lunch 1:00 PM -2:00 PM: Planet APIs continued ( Sam Roy ) 2-00 PM -3.00 PM: Getting started with Planet in Google Earth Engine ( Sam Roy ) Toolbox and Tutorials 3:00 PM - 3:15 PM: Networking Break 3.15 to 4 PM Question and Answers: Open Panel","title":"Table of Contents"},{"location":"citations/","text":"Citations From concept to actual tools and insights, much have gone into creating these platforms and I hope you will cite them as needed. To cite Planet data in publications, please use the following: Planet Team (2017). Planet Application Program Interface: In Space for Life on Earth. San Francisco, CA. https://api.planet.com. To cite Google Earth Engine, use the following: Gorelick, Noel, Matt Hancher, Mike Dixon, Simon Ilyushchenko, David Thau, and Rebecca Moore. Google Earth Engine: Planetary-scale geospatial analysis for everyone. Remote Sensing of Environment 202 (2017): 18-27.","title":"Citations"},{"location":"citations/#citations","text":"From concept to actual tools and insights, much have gone into creating these platforms and I hope you will cite them as needed. To cite Planet data in publications, please use the following: Planet Team (2017). Planet Application Program Interface: In Space for Life on Earth. San Francisco, CA. https://api.planet.com. To cite Google Earth Engine, use the following: Gorelick, Noel, Matt Hancher, Mike Dixon, Simon Ilyushchenko, David Thau, and Rebecca Moore. Google Earth Engine: Planetary-scale geospatial analysis for everyone. Remote Sensing of Environment 202 (2017): 18-27.","title":"Citations"},{"location":"contact/","text":"Contact Us Samapriya Roy, Ph.D. Customer an Research Engagement Senior Solutions Engineer Planet Labs Github: samapriya.github.io","title":"Contact Me"},{"location":"contact/#contact-us","text":"Samapriya Roy, Ph.D. Customer an Research Engagement Senior Solutions Engineer Planet Labs Github: samapriya.github.io","title":"Contact Us"},{"location":"projects/data_api/","text":"Data API Data API is the core API that you will deal with in this workshop. For the most part , the Data API allows you to search for Datasets, activate and download images. You can find entire API reference here and we will access most of the functionality using the Planet Client. The API is self descriptive and allows you to read about specs, items and asset types. You can exlore the data endpoint, by using this webaddress in chrome, use your API key as username and leave password blank https : //api.planet.com/data/v1/","title":"Data API"},{"location":"projects/data_api/#data-api","text":"Data API is the core API that you will deal with in this workshop. For the most part , the Data API allows you to search for Datasets, activate and download images. You can find entire API reference here and we will access most of the functionality using the Planet Client. The API is self descriptive and allows you to read about specs, items and asset types. You can exlore the data endpoint, by using this webaddress in chrome, use your API key as username and leave password blank https : //api.planet.com/data/v1/","title":"Data API"},{"location":"projects/downloading-images/","text":"Downloading Images You can download images from Planet using a couple of methods, including but not limited to Planet Explorer or using a client to make requests to the Data API and downloading imagery. Planet Explorer Planet Explorer is probably one of the most useful and beloved interface to interact with and download Planet Labs satellite imagery. Not only does it allow you to filter your images to specific sensors but it also allows you to filter by cloud cover among other things. A neat little trick in Planet Explorer is that once the images are filtered if you want to download multiple images at once in an order you can hold down the control key(if using a windows machine) and click on multiple sets of imagery adding them to the same order. Steps to get satellite imagery from Planet Explorer Once the images have been ordered sit back and relax as the order notification that your delivery is ready to be picked up will be emailed to you. To interact with the Data API and batch download imagery there is host of Planet Platform documentation that teach you how to do that step by step. Batch Download Images Using Planet Python CLI This is the default command line tool that is provided by planet and you can find the project here and it connects to Data API to perform multiple operations such as quick search, activate and download assets among a few other things. Install it easily using pip install planet follow it by planet init to initialize and you are ready to go. A simple setup to download images using a geometry(a simple geometry geojson file) and date range (let us say between 2018-07-01 to 2018-08-31), cloud cover(less than 10% or less than 0.1) could be achieved in a single line of cli command planet data download --item-type PSScene4Band --geom \"full path to geometry.geojson\" --date acquired gt 2018-07-01 --date acquired lt 2018-08-31 --range cloud_cover lt 0.1 --asset-type analytic --dest \"your local directory path\" Batch Download and Upload to Earth Engine I have also created another stand alone tool apart from the ppipe tool to just download imagery once you have selected area of interest and sensor type. This will work if you have the (Planet Python Client installed). Incase you missed this in housekeeping you can read it again . It is using the Saved search function to allow you to batch download. You can find the tool here . You can pip install it using pip install ppipe This tool is a quick addon to existing application of planet saved searches to download images. This prints all the saved searches that you might have saved using the CLI or using the explorer. In which case you are able to set the filters, choose item types and date ranges and aoi within the Planet Explorer GUI and then be able to use the saved search name to execute a batch download command. This combines activation and download and works only for a single item type that was set in the search. You can choose to provide a limit which limits the number of item-asset combinations to download or use without limit and all items and asset combinations in the aoi will be downloaded. Using with limits python saved_search_download.py search_name analytic C:\\planet_demo 10 Without limits the setup becomes python saved_search_download.py search_name analytic C:\\planet_demo I added the functionality to use Planet's own async downlaoder to download based on a geometry A setup using geojson needs to include other filters too and a typical setup would be ppipe dasync --infile \"C:\\Users\\johndoe\\geometry.geojson\" --item \"PSScene4Band\" --asset \"analytic\" --local \"C:\\planet\" --start \"2018-06-01\" --end \"2018-08-01\" --cmin 0 --cmax 0.4 Using a stuctured json file that you might have created earlier means you don't have to pass additional filters everytime python ppipe.py dasync --infile \"C:\\Users\\johndoe\\geometry.json\" --item \"PSScene4Band\" --asset \"analytic_xml\" --local \"C:\\planet_demo\" However, you can still decide to pass the filters and the filters you pass will overwrite existing filters python ppipe.py dasync --infile \"C:\\Users\\johndoe\\geometry.json\" --item \"PSScene4Band\" --asset \"analytic_xml\" --local \"C:\\planet_demo\" --start \"2018-06-01\" --end \"2018-08-01\" --cmin \"0\" --cmax 0.4","title":"Downloading Images"},{"location":"projects/downloading-images/#downloading-images","text":"You can download images from Planet using a couple of methods, including but not limited to Planet Explorer or using a client to make requests to the Data API and downloading imagery.","title":"Downloading Images"},{"location":"projects/downloading-images/#planet-explorer","text":"Planet Explorer is probably one of the most useful and beloved interface to interact with and download Planet Labs satellite imagery. Not only does it allow you to filter your images to specific sensors but it also allows you to filter by cloud cover among other things. A neat little trick in Planet Explorer is that once the images are filtered if you want to download multiple images at once in an order you can hold down the control key(if using a windows machine) and click on multiple sets of imagery adding them to the same order. Steps to get satellite imagery from Planet Explorer Once the images have been ordered sit back and relax as the order notification that your delivery is ready to be picked up will be emailed to you. To interact with the Data API and batch download imagery there is host of Planet Platform documentation that teach you how to do that step by step.","title":"Planet Explorer"},{"location":"projects/downloading-images/#batch-download-images","text":"","title":"Batch Download Images"},{"location":"projects/downloading-images/#using-planet-python-cli","text":"This is the default command line tool that is provided by planet and you can find the project here and it connects to Data API to perform multiple operations such as quick search, activate and download assets among a few other things. Install it easily using pip install planet follow it by planet init to initialize and you are ready to go. A simple setup to download images using a geometry(a simple geometry geojson file) and date range (let us say between 2018-07-01 to 2018-08-31), cloud cover(less than 10% or less than 0.1) could be achieved in a single line of cli command planet data download --item-type PSScene4Band --geom \"full path to geometry.geojson\" --date acquired gt 2018-07-01 --date acquired lt 2018-08-31 --range cloud_cover lt 0.1 --asset-type analytic --dest \"your local directory path\"","title":"Using Planet Python CLI"},{"location":"projects/downloading-images/#batch-download-and-upload-to-earth-engine","text":"I have also created another stand alone tool apart from the ppipe tool to just download imagery once you have selected area of interest and sensor type. This will work if you have the (Planet Python Client installed). Incase you missed this in housekeeping you can read it again . It is using the Saved search function to allow you to batch download. You can find the tool here . You can pip install it using pip install ppipe This tool is a quick addon to existing application of planet saved searches to download images. This prints all the saved searches that you might have saved using the CLI or using the explorer. In which case you are able to set the filters, choose item types and date ranges and aoi within the Planet Explorer GUI and then be able to use the saved search name to execute a batch download command. This combines activation and download and works only for a single item type that was set in the search. You can choose to provide a limit which limits the number of item-asset combinations to download or use without limit and all items and asset combinations in the aoi will be downloaded. Using with limits python saved_search_download.py search_name analytic C:\\planet_demo 10 Without limits the setup becomes python saved_search_download.py search_name analytic C:\\planet_demo I added the functionality to use Planet's own async downlaoder to download based on a geometry A setup using geojson needs to include other filters too and a typical setup would be ppipe dasync --infile \"C:\\Users\\johndoe\\geometry.geojson\" --item \"PSScene4Band\" --asset \"analytic\" --local \"C:\\planet\" --start \"2018-06-01\" --end \"2018-08-01\" --cmin 0 --cmax 0.4 Using a stuctured json file that you might have created earlier means you don't have to pass additional filters everytime python ppipe.py dasync --infile \"C:\\Users\\johndoe\\geometry.json\" --item \"PSScene4Band\" --asset \"analytic_xml\" --local \"C:\\planet_demo\" However, you can still decide to pass the filters and the filters you pass will overwrite existing filters python ppipe.py dasync --infile \"C:\\Users\\johndoe\\geometry.json\" --item \"PSScene4Band\" --asset \"analytic_xml\" --local \"C:\\planet_demo\" --start \"2018-06-01\" --end \"2018-08-01\" --cmin \"0\" --cmax 0.4","title":"Batch Download and Upload to Earth Engine"},{"location":"projects/edges/","text":"Edge Detection You can also run powerful functions such as edge detection using Hough and Canny transforms for example for single images as well as on collections to do edge counts, connectivity measures among a few other applications. Similar to earlier example you can access the full script here or copy and past the same code into code.earthengine.google.com //Add an AOI var aoi = ee . FeatureCollection ( users/io-work-1/vector/subset ) //Zoom to AOI Map . centerObject ( aoi , 15 ) //Add image and visualization var image = ee . Image ( users/io-work-1/open-ca/PS4BSR/20180621_182201_1008_3B_AnalyticMS_SR ) var vis = { opacity : 1 , bands : [ b4 , b3 , b2 ], min :- 433.8386769876429 , max : 2822.7077530529555 , gamma : 1 }; var ndvi = image . normalizedDifference ([ b4 , b3 ]); // Apply a Canny edge detector. var canny = ee . Algorithms . CannyEdgeDetector ({ image : ndvi , threshold : 0.2 }). multiply ( 255 ); // Apply the Hough transform. var h = ee . Algorithms . HoughTransform ({ image : canny , gridSize : 256 , inputThreshold : 80 , lineThreshold : 80 }); // Display. Map . addLayer ( image , vis , source_image ); Map . addLayer ( ndvi ,{ min : - 0.05 , max : 0.5 }, NDVI , false ) Map . addLayer ( canny . updateMask ( canny ), { min : 0 , max : 1 , palette : blue }, canny ); Map . addLayer ( h . updateMask ( h ), { min : 0 , max : 1 , palette : red }, hough ); Map . setOptions ( SATELLITE )","title":"Edge Detection"},{"location":"projects/edges/#edge-detection","text":"You can also run powerful functions such as edge detection using Hough and Canny transforms for example for single images as well as on collections to do edge counts, connectivity measures among a few other applications. Similar to earlier example you can access the full script here or copy and past the same code into code.earthengine.google.com //Add an AOI var aoi = ee . FeatureCollection ( users/io-work-1/vector/subset ) //Zoom to AOI Map . centerObject ( aoi , 15 ) //Add image and visualization var image = ee . Image ( users/io-work-1/open-ca/PS4BSR/20180621_182201_1008_3B_AnalyticMS_SR ) var vis = { opacity : 1 , bands : [ b4 , b3 , b2 ], min :- 433.8386769876429 , max : 2822.7077530529555 , gamma : 1 }; var ndvi = image . normalizedDifference ([ b4 , b3 ]); // Apply a Canny edge detector. var canny = ee . Algorithms . CannyEdgeDetector ({ image : ndvi , threshold : 0.2 }). multiply ( 255 ); // Apply the Hough transform. var h = ee . Algorithms . HoughTransform ({ image : canny , gridSize : 256 , inputThreshold : 80 , lineThreshold : 80 }); // Display. Map . addLayer ( image , vis , source_image ); Map . addLayer ( ndvi ,{ min : - 0.05 , max : 0.5 }, NDVI , false ) Map . addLayer ( canny . updateMask ( canny ), { min : 0 , max : 1 , palette : blue }, canny ); Map . addLayer ( h . updateMask ( h ), { min : 0 , max : 1 , palette : red }, hough ); Map . setOptions ( SATELLITE )","title":"Edge Detection"},{"location":"projects/housekeeping/","text":"Housekeeping and Setup For most users data usage often boils down to the software you use to analyze and manipulate images and how you are going to work with them. So here are going to do some housekeeping and setup depending on which tools and setup you are most comfortable with 1) Planet Command Line Interface(CLI) Setup You planet account comes with a brand new CLI and it allows you to perfrom basic functions such as search for ID[s] and for images in a specific location, export all image footprint in your area of interest and so on. Installation is pretty simple pip install planet You installation steps from earlier means you have managed to not only create the Google Earth Engine account but also installed its client. Incase you have missed it go to their main reference page for installation of their python client . 2) Google Earth Engine(GEE) Command Line Interface(CLI) Setup This assumes that you have registered for a Google Earth Engine account but also installed its client. Incase you have missed it go to their main reference page for installation of their python client . Since you can consume Earth Engine using both Javascript(in browser) and Python(locally) the interaction would depend on the scale of your tasks and what you wish your achieve as your end result. Once installed make sure you authenticate your earth engine client and then your CLI should give you the following options 3) Location to GEE datasets For the purpose of this workshop, I have downloaded and ingested Planet 4Band Surface Reflectance imagery into an earth engine image colllection. The included data is maintained as open access license granted by the Open California Program. you can add any of the datasets by simply adding the following lines. For now you access these here //Add image collection and area of interest var collection = ee . ImageCollection ( projects/sat-io/open-ca/ps4bsr ) var aoi = ee . FeatureCollection ( projects/sat-io/open-ca/aoi ) //get size of collection print ( PlanetScope SR , collection . size ()) //Get the first element from each collection print ( PSR Image , collection . first ()) for those using python API you can still access a collection import ee ee . Initialize () collection = ee . ImageCollection ( projects/sat-io/open-ca/ps4bsr ) ##Check how many images does the collection have print ( collection . size () . getInfo ()) ## Print metadata from the first image print ( collection . first () . getInfo ()) 4) Adding additional Images For a minute there imagine you want to work with more data apart from the few areas we talked about, the Education and Research account gives you 10,000 square kilometer and you can then upload it into GEE. For the simplest users getting images into GEE begins with the Image upload tool located inside GEE. Once you have added the filename you can edit additional metadata such as start time, cloud cover information if you have that from the metadata file among other things. This tool does not have a way for you to ingest any metadata automatically so it has to be fed manually. The image name is automatically filled in with the filename that you select when uploading. Note you cannot select more than one image and upload as a single image if they overlap each other. To handle which we have the concept of image collections. Where you can upload many images. To import images into collections, you have to either import them manually as images first and then copy them into the collection one by one or for now use an external tool to help such as using the Google Earth Engine CLI. For now you can use the tool I made to batch upload collections along with their metadata into Google Earth Engine . You can install this by simply typing pip install ppipe You can read about the tool, it's setup and it's operation at this Planet Story Incase you have a Google Cloud Storage bucket you can also push images automatically to be ingested into GEE. Though this requires interaction with gsutil and starting ingestion function for each image. The GEE guide for image ingestion can be found here 5) Additional Tools and Toolboxes for Local Analysis If you need to handle the data locally using Matlab, QGIS or ArcMap make sure you have these softwares installed. The images can then be downloaded and analyzed using multiple methods and toolsets. A lot of these softwares have additional capabilities to help you further use Planet data. You can find a better reference of external integration here ENVI Integration ESRI Integration Cesium Integration Boundless PCI Geomatics","title":"Basic Housekeeping and Setup"},{"location":"projects/housekeeping/#housekeeping-and-setup","text":"For most users data usage often boils down to the software you use to analyze and manipulate images and how you are going to work with them. So here are going to do some housekeeping and setup depending on which tools and setup you are most comfortable with","title":"Housekeeping and Setup"},{"location":"projects/housekeeping/#1-planet-command-line-interfacecli-setup","text":"You planet account comes with a brand new CLI and it allows you to perfrom basic functions such as search for ID[s] and for images in a specific location, export all image footprint in your area of interest and so on. Installation is pretty simple pip install planet You installation steps from earlier means you have managed to not only create the Google Earth Engine account but also installed its client. Incase you have missed it go to their main reference page for installation of their python client .","title":"1) Planet Command Line Interface(CLI) Setup"},{"location":"projects/housekeeping/#2-google-earth-enginegee-command-line-interfacecli-setup","text":"This assumes that you have registered for a Google Earth Engine account but also installed its client. Incase you have missed it go to their main reference page for installation of their python client . Since you can consume Earth Engine using both Javascript(in browser) and Python(locally) the interaction would depend on the scale of your tasks and what you wish your achieve as your end result. Once installed make sure you authenticate your earth engine client and then your CLI should give you the following options","title":"2) Google Earth Engine(GEE) Command Line Interface(CLI) Setup"},{"location":"projects/housekeeping/#3-location-to-gee-datasets","text":"For the purpose of this workshop, I have downloaded and ingested Planet 4Band Surface Reflectance imagery into an earth engine image colllection. The included data is maintained as open access license granted by the Open California Program. you can add any of the datasets by simply adding the following lines. For now you access these here //Add image collection and area of interest var collection = ee . ImageCollection ( projects/sat-io/open-ca/ps4bsr ) var aoi = ee . FeatureCollection ( projects/sat-io/open-ca/aoi ) //get size of collection print ( PlanetScope SR , collection . size ()) //Get the first element from each collection print ( PSR Image , collection . first ()) for those using python API you can still access a collection import ee ee . Initialize () collection = ee . ImageCollection ( projects/sat-io/open-ca/ps4bsr ) ##Check how many images does the collection have print ( collection . size () . getInfo ()) ## Print metadata from the first image print ( collection . first () . getInfo ())","title":"3) Location to GEE datasets"},{"location":"projects/housekeeping/#4-adding-additional-images","text":"For a minute there imagine you want to work with more data apart from the few areas we talked about, the Education and Research account gives you 10,000 square kilometer and you can then upload it into GEE. For the simplest users getting images into GEE begins with the Image upload tool located inside GEE. Once you have added the filename you can edit additional metadata such as start time, cloud cover information if you have that from the metadata file among other things. This tool does not have a way for you to ingest any metadata automatically so it has to be fed manually. The image name is automatically filled in with the filename that you select when uploading. Note you cannot select more than one image and upload as a single image if they overlap each other. To handle which we have the concept of image collections. Where you can upload many images. To import images into collections, you have to either import them manually as images first and then copy them into the collection one by one or for now use an external tool to help such as using the Google Earth Engine CLI. For now you can use the tool I made to batch upload collections along with their metadata into Google Earth Engine . You can install this by simply typing pip install ppipe You can read about the tool, it's setup and it's operation at this Planet Story Incase you have a Google Cloud Storage bucket you can also push images automatically to be ingested into GEE. Though this requires interaction with gsutil and starting ingestion function for each image. The GEE guide for image ingestion can be found here","title":"4) Adding additional Images"},{"location":"projects/housekeeping/#5-additional-tools-and-toolboxes-for-local-analysis","text":"If you need to handle the data locally using Matlab, QGIS or ArcMap make sure you have these softwares installed. The images can then be downloaded and analyzed using multiple methods and toolsets. A lot of these softwares have additional capabilities to help you further use Planet data. You can find a better reference of external integration here ENVI Integration ESRI Integration Cesium Integration Boundless PCI Geomatics","title":"5) Additional Tools and Toolboxes for Local Analysis"},{"location":"projects/img/","text":"Images in Earth Engine In the GEE environment images are stored in Cloud Optimized Geospatial tiles instead of a single image which allows for running an analysis this scale. This means that though the input imagery comes in know formats such as geotiff , MrSid and img these datasets post ingestion into GEE are converted into tiles that are used for at scale analysis. All images that are ingested into either GEE(s) Raster Catalog or your own personal folder and stored in folder or collections of images as you would expect to see when doing deep time stack analysis. These images have defined data type,scales and projections along with some default properties such as an index and ID among other system properties. So we can query these properties, print them and add them //Setting up a Geometry var geometry = ee . FeatureCollection ( users/io-work-1/vector/openca ) //PlanetScope is 4 band imagery, we are adding surface reflectance image with visualization var vis = { opacity : 1 , bands : [ b4 , b3 , b2 ], min : 208 , max : 2385 , gamma : 1 }; //Add an image var image = ee . Image ( users/io-work-1/open-ca/PS4BSR/20180621_182201_1008_3B_AnalyticMS_SR ) print ( Single Image , image ) //Center the Map to the image and add the image Map . centerObject ( geometry , 12 ) Map . addLayer ( image , vis , Image ) //Clip an image var clipped = image . clip ( geometry ) Map . addLayer ( clipped , vis , Clipped Image ) //Change BaseMap to Satellite Map . setOptions ( SATELLITE )","title":"Images"},{"location":"projects/img/#images-in-earth-engine","text":"In the GEE environment images are stored in Cloud Optimized Geospatial tiles instead of a single image which allows for running an analysis this scale. This means that though the input imagery comes in know formats such as geotiff , MrSid and img these datasets post ingestion into GEE are converted into tiles that are used for at scale analysis. All images that are ingested into either GEE(s) Raster Catalog or your own personal folder and stored in folder or collections of images as you would expect to see when doing deep time stack analysis. These images have defined data type,scales and projections along with some default properties such as an index and ID among other system properties. So we can query these properties, print them and add them //Setting up a Geometry var geometry = ee . FeatureCollection ( users/io-work-1/vector/openca ) //PlanetScope is 4 band imagery, we are adding surface reflectance image with visualization var vis = { opacity : 1 , bands : [ b4 , b3 , b2 ], min : 208 , max : 2385 , gamma : 1 }; //Add an image var image = ee . Image ( users/io-work-1/open-ca/PS4BSR/20180621_182201_1008_3B_AnalyticMS_SR ) print ( Single Image , image ) //Center the Map to the image and add the image Map . centerObject ( geometry , 12 ) Map . addLayer ( image , vis , Image ) //Clip an image var clipped = image . clip ( geometry ) Map . addLayer ( clipped , vis , Clipped Image ) //Change BaseMap to Satellite Map . setOptions ( SATELLITE )","title":"Images in Earth Engine"},{"location":"projects/lab/","text":"Labs Method 1: Launch JupyterLab Locally This assumes you can launch jupyterlab on your machine and we are using Python 3. There are a couple of ways to launch this clone the master branch Unzip the folder and launch jupyter lab locally by simply typing jupyter lab Method 2: Launch JupyterLab on BinderHub This allows you to run the analysis remotely and handles dependencies Binder run launches a jupyterhub instance but you can easily convert that to jupyterlab by replacing the trailing /tree with /lab","title":"Lab space"},{"location":"projects/lab/#labs","text":"","title":"Labs"},{"location":"projects/lab/#method-1-launch-jupyterlab-locally","text":"This assumes you can launch jupyterlab on your machine and we are using Python 3. There are a couple of ways to launch this clone the master branch Unzip the folder and launch jupyter lab locally by simply typing jupyter lab","title":"Method 1: Launch JupyterLab Locally"},{"location":"projects/lab/#method-2-launch-jupyterlab-on-binderhub","text":"This allows you to run the analysis remotely and handles dependencies Binder run launches a jupyterhub instance but you can easily convert that to jupyterlab by replacing the trailing /tree with /lab","title":"Method 2: Launch JupyterLab on BinderHub"},{"location":"projects/labs/","text":"","title":"Labs"},{"location":"projects/labs_ee/","text":"","title":"Labs"},{"location":"projects/orders/","text":"Orders v2 API Ordersv2 is the next iteration of Planet's API in getting Analysis Ready Data (ARD) delivered to you. Orders v2 allows you to improved functionality in this domain, including capability to submit an number of images in a batch order, and perform operations such as top of atmospheric reflectance, compression, coregistration and also enhanced notifications such as email and webhooks.You can find the API overview and reference here . This is not yet integrated into a client but you can make the requests using clients like Postman or ARC. The API unlike data API is not self descriptive and results will only appear once you have placed an order. You can exlore the data endpoint, by using this webaddress in chrome, use your API key as username and leave password blank https : //api.planet.com/compute/ops/orders/v2 Order Up: Using and Building with Planet \u2019s new Ordersv2 API I did create a simple command line inteface (CLI) called porder to access this API and chain together tools, you can read about the tool and the tutorial here . You can find it on GitHub here .","title":"Ordersv2 API"},{"location":"projects/orders/#orders-v2-api","text":"Ordersv2 is the next iteration of Planet's API in getting Analysis Ready Data (ARD) delivered to you. Orders v2 allows you to improved functionality in this domain, including capability to submit an number of images in a batch order, and perform operations such as top of atmospheric reflectance, compression, coregistration and also enhanced notifications such as email and webhooks.You can find the API overview and reference here . This is not yet integrated into a client but you can make the requests using clients like Postman or ARC. The API unlike data API is not self descriptive and results will only appear once you have placed an order. You can exlore the data endpoint, by using this webaddress in chrome, use your API key as username and leave password blank https : //api.planet.com/compute/ops/orders/v2","title":"Orders v2 API"},{"location":"projects/orders/#order-up-using-and-building-with-planet-s-new-ordersv2-api","text":"I did create a simple command line inteface (CLI) called porder to access this API and chain together tools, you can read about the tool and the tutorial here . You can find it on GitHub here .","title":"Order Up: Using and Building with Planet \u2019s new Ordersv2 API"},{"location":"projects/planet-asset/","text":"Understand Planet Items-Assets API You can read the most updated white paper on planet products, items, assets and specifications here . While you look at these spec sheets try to understand how you would want to use the data, the purpose and scope of the question you want to answer, the size of downloads and the overall product or derivate in mind. To think of Planet products you have to understand two terms as thought they live in a hierarchy Planet Imagery Product Offerings Items and Assets Item type almost refers exclusively to a family of satellite or sensor types so PlanetScope, RapidEye, Skysat, Landsat and so on are all item types. These are model definitions based on the type of sensor you are utilizing for performing any type of analysis. Asset types are types of item derivatives or data types that you are actually utilizing for example analytic, analytic_sr, analytic_xml, visual and so on. These allow you to choose the type of actual data that you are able to download including the type and level of preprocesing that has been applied to it. For further reference on item asset relationships you can visit the docs Now the assumption here is that after you have created your account you have downloaded data either from Planet Explorer or you have been curious and looked into the data API and used the wonderful python client from planet. Incase you have not and you have python on your system, invoke the power of pip and type pip install planet There is so much more to be done using planet data using some amazing API(s) including What if you wanted to download hundreds and thousands of scenes for your analysis, the Data API will allow you to understand the backend. If you want your images to be automatically clipped to your area of interest, you can use the Clips API","title":"Planet Imagery"},{"location":"projects/planet-asset/#understand-planet-items-assets-api","text":"You can read the most updated white paper on planet products, items, assets and specifications here . While you look at these spec sheets try to understand how you would want to use the data, the purpose and scope of the question you want to answer, the size of downloads and the overall product or derivate in mind. To think of Planet products you have to understand two terms as thought they live in a hierarchy Planet Imagery Product Offerings","title":"Understand Planet Items-Assets &amp; API"},{"location":"projects/planet-asset/#items-and-assets","text":"Item type almost refers exclusively to a family of satellite or sensor types so PlanetScope, RapidEye, Skysat, Landsat and so on are all item types. These are model definitions based on the type of sensor you are utilizing for performing any type of analysis. Asset types are types of item derivatives or data types that you are actually utilizing for example analytic, analytic_sr, analytic_xml, visual and so on. These allow you to choose the type of actual data that you are able to download including the type and level of preprocesing that has been applied to it. For further reference on item asset relationships you can visit the docs Now the assumption here is that after you have created your account you have downloaded data either from Planet Explorer or you have been curious and looked into the data API and used the wonderful python client from planet. Incase you have not and you have python on your system, invoke the power of pip and type pip install planet There is so much more to be done using planet data using some amazing API(s) including What if you wanted to download hundreds and thousands of scenes for your analysis, the Data API will allow you to understand the backend. If you want your images to be automatically clipped to your area of interest, you can use the Clips API","title":"Items and Assets"},{"location":"projects/rpl/","text":"Registering for a Planet account What you need first to get started in simply to register for a Planet account. These account will almost immediately gain access to the Open California Dataset which is maintained regulary at this spatial and temporal resolution. You can find more information about the Open California project here . These datasets and full-resolution imagery for the entire state of California are covered under a CC BY-SA 4.0 license via Planet's Open California initiative. If you are a university researchers, academics, and/or scientists, your free account allows you to download 10,000 square kilometers of data for non commercial use, every month, anywhere in the world. You can apply for Education and Research account here Sign up for a Planet Account Planet Explorer is a powerful tool for exploring Planet's catalog of daily imagery and worldwide mosaics directly in your browser. It's also your gateway to creating a Planet Account,and gaining access to Planet's APIs.To sign up, visit planet.com/explorer . From there, click Sign Up and enter your email address to receive an invitation: Sign up with Planet Explorer Check your email follow the directions to complete the registration process. Find your API Key To use Planet's APIs, you'll need an API key. API keys are available to all registered users with active Planet accounts.Once you're signed up, log in to planet.com/account to get your API key. Find the API key field under your account information, as seen here: Account information (not a real API key) Registering for a Google Earth Engine Account If you don\u2019t have a developer account sign up for one here and make sure you follow the instructions to install the python CLI. The API and the CLI gets updated frequently and as does the install process as needed so you can read the latest instructions at the page. Getting Help with Planet and Google Earth Engine Both Planet and Google Earth Engine maintain a developer page for you to find out more information,test tutorials along with housing a few quick FAQ(s) You can find Planet Developer Site here and offcourse the Earth Engine Developers Page","title":"Registering for a Planet account"},{"location":"projects/rpl/#registering-for-a-planet-account","text":"What you need first to get started in simply to register for a Planet account. These account will almost immediately gain access to the Open California Dataset which is maintained regulary at this spatial and temporal resolution. You can find more information about the Open California project here . These datasets and full-resolution imagery for the entire state of California are covered under a CC BY-SA 4.0 license via Planet's Open California initiative. If you are a university researchers, academics, and/or scientists, your free account allows you to download 10,000 square kilometers of data for non commercial use, every month, anywhere in the world. You can apply for Education and Research account here","title":"Registering for a Planet account"},{"location":"projects/rpl/#sign-up-for-a-planet-account","text":"Planet Explorer is a powerful tool for exploring Planet's catalog of daily imagery and worldwide mosaics directly in your browser. It's also your gateway to creating a Planet Account,and gaining access to Planet's APIs.To sign up, visit planet.com/explorer . From there, click Sign Up and enter your email address to receive an invitation: Sign up with Planet Explorer Check your email follow the directions to complete the registration process.","title":"Sign up for a Planet Account"},{"location":"projects/rpl/#find-your-api-key","text":"To use Planet's APIs, you'll need an API key. API keys are available to all registered users with active Planet accounts.Once you're signed up, log in to planet.com/account to get your API key. Find the API key field under your account information, as seen here: Account information (not a real API key)","title":"Find your API Key"},{"location":"projects/rpl/#registering-for-a-google-earth-engine-account","text":"If you don\u2019t have a developer account sign up for one here and make sure you follow the instructions to install the python CLI. The API and the CLI gets updated frequently and as does the install process as needed so you can read the latest instructions at the page.","title":"Registering for a Google Earth Engine Account"},{"location":"projects/rpl/#getting-help-with-planet-and-google-earth-engine","text":"Both Planet and Google Earth Engine maintain a developer page for you to find out more information,test tutorials along with housing a few quick FAQ(s) You can find Planet Developer Site here and offcourse the Earth Engine Developers Page","title":"Getting Help with Planet and Google Earth Engine"},{"location":"projects/setup/","text":"Registering for a Planet account What you need first to get started in simply to register for a Planet account. These account will almost immediately gain access to the Open California Dataset which is maintained regulary at this spatial and temporal resolution. You can find more information about the Open California project here . These datasets and full-resolution imagery for the entire state of California are covered under a CC BY-SA 4.0 license via Planet's Open California initiative. Basic Account To sign up, visit planet.com/explorer . From there, click Sign Up and enter your email address to receive an invitation: Check your email follow the directions to complete the registration process. Trial Account If you need an account in a hurry register for the Trial account, gives you 14 day global access with some limits. Once the trial ends you can still browse using the Planet Explorer and ask for a license or subscription. Education and Research users If you are a university researchers, academics, and/or scientists, your free account allows you to download 10,000 square kilometers of data for non commercial use, every month, anywhere in the world. You can apply for Education and Research account here Find your API Key Planet Explorer is a powerful tool for exploring Planet's catalog of daily imagery and worldwide mosaics directly in your browser. It's also your gateway to creating a Planet Account,and gaining access to Planet's APIs. To use Planet's APIs, you'll need an API key. API keys are available to all registered users with active Planet accounts.Once you're signed up, log in to planet.com/account to get your API key. Find the API key field under your account information, as seen here: Account information (not a real API key) Registering for a Google Earth Engine Account If you don\u2019t have a developer account sign up for one here and make sure you follow the instructions to install the python CLI. The API and the CLI gets updated frequently and as does the install process as needed so you can read the latest instructions at the page. Getting Help with Planet and Google Earth Engine Both Planet and Google Earth Engine maintain a developer page for you to find out more information,test tutorials along with housing a few quick FAQ(s) You can find Planet Developer Site here and offcourse the Earth Engine Developers Page","title":"Setting up your Accounts"},{"location":"projects/setup/#registering-for-a-planet-account","text":"What you need first to get started in simply to register for a Planet account. These account will almost immediately gain access to the Open California Dataset which is maintained regulary at this spatial and temporal resolution. You can find more information about the Open California project here . These datasets and full-resolution imagery for the entire state of California are covered under a CC BY-SA 4.0 license via Planet's Open California initiative.","title":"Registering for a Planet account"},{"location":"projects/setup/#basic-account","text":"To sign up, visit planet.com/explorer . From there, click Sign Up and enter your email address to receive an invitation: Check your email follow the directions to complete the registration process.","title":"Basic Account"},{"location":"projects/setup/#trial-account","text":"If you need an account in a hurry register for the Trial account, gives you 14 day global access with some limits. Once the trial ends you can still browse using the Planet Explorer and ask for a license or subscription.","title":"Trial Account"},{"location":"projects/setup/#education-and-research-users","text":"If you are a university researchers, academics, and/or scientists, your free account allows you to download 10,000 square kilometers of data for non commercial use, every month, anywhere in the world. You can apply for Education and Research account here","title":"Education and Research users"},{"location":"projects/setup/#find-your-api-key","text":"Planet Explorer is a powerful tool for exploring Planet's catalog of daily imagery and worldwide mosaics directly in your browser. It's also your gateway to creating a Planet Account,and gaining access to Planet's APIs. To use Planet's APIs, you'll need an API key. API keys are available to all registered users with active Planet accounts.Once you're signed up, log in to planet.com/account to get your API key. Find the API key field under your account information, as seen here: Account information (not a real API key)","title":"Find your API Key"},{"location":"projects/setup/#registering-for-a-google-earth-engine-account","text":"If you don\u2019t have a developer account sign up for one here and make sure you follow the instructions to install the python CLI. The API and the CLI gets updated frequently and as does the install process as needed so you can read the latest instructions at the page.","title":"Registering for a Google Earth Engine Account"},{"location":"projects/setup/#getting-help-with-planet-and-google-earth-engine","text":"Both Planet and Google Earth Engine maintain a developer page for you to find out more information,test tutorials along with housing a few quick FAQ(s) You can find Planet Developer Site here and offcourse the Earth Engine Developers Page","title":"Getting Help with Planet and Google Earth Engine"},{"location":"projects/tools/","text":"Data Sources Earth Engine Data Catalog The Earth Engine Data Catalog host over 500+ datasets that have been ingested and a lot more actively curated for easy use. The catalog allows you to look for datasets using keywords as tags so search for water and see what you can find. Open California Dataset Apart from Education and Research account quota of 10,000 sqkm per month, you also have access to free and open data for all of California using the Open California project High Resolution Settlement Layer The Connectivity Lab at Facebook released high resolution population datasets for a couple of countries these are done using high resolution training data at 0.5 m resolution and can be used to understand urban density and movement. This is a 3band product where based on information from Center for International Earth Science Information Network(CIESIN) . I have ingested 13 High Resolution Settlement Layers(HRSL) layers into Google Earth Engine for you to use during the period of the hackathon. You can find the dataset here var hrsl = ee . ImageCollection ( users/samapriya/hrsl ) print ( hrsl ) Microsoft: Computer generated building footprints for the United States and Open AI for Earth In June Microsoft released 125 million Footprints in the US as Open Data, US Buildings Footprints . Though considering the segmentation and classification are performed for Building rooftops as is a better indicator of rooftoop edges. That being said this was also when the discussion and interest in Microsoft Cognitive Toolkit CNTK . You can find more about the research including the papers and the resnet base on their github page Another important and interesting project was the Land Cover Mapping using CNTK and the GeoAI DataScience VM . Head to the [main website] Microsoft: AI for Earth I am including the series of links and useful follow ups posted earlier on Slack to have easy reference Azure Setup Azure AI School Azure Congnitive Services Azure VM Services Student Signup Azure AI school Azure cognitive Services Azure Data Science VM Free Account Setup Azure AI Demo Azure cognitive services demo Azure Geo Data Science VM Azure Doc AI Lab Azure Deep Learning VM Azure SDK and Tools Azure Machine Learning and AI Azure Machine Learning Overview Azure ML Sample Datasets Deep Learning and AI Frameworks Azure ML and data science Tools Samples and Walkthroughs Azure AI Gallery for community samples Satellogic Open Data Head over to Satellogic's data explorer and use the username and password provided to you during the hackathon to access their multispectral and hyperspectral datasets. Tools Planet CLI The planet CLI as mentioned earlier allows you to batch activate, search, download imagery among other things interact with Planet Data API directly. You can find it here or try pip install planet Planet notebooks Planet Labs holds and hosts plenty of jupyter notebooks of you to be able to download, use and analyze Planet data. Earth Engine Python Installation You can access earthengine using python rather than javascript for batch processing. Find installation instructions here Earth Engine CLI This is updated quite frequently earthengine and new releases are released on pypi Satellogic Open Impact Satellogic maintains an open impact repository that holds tutorials to access, download and process data along with introduction to Telluric for analysis. You can find it here satadd: Satellite Data Download Addon I wrote tool a few days back with the idea to harmonize easy access to data that are made available from public and private open data endpoints. This will allow you to download , Planet Labs data, Satellogic Data, query and search Digital Globe data , and query and download Earth Engine imagery as neeeded. You can find the tool here or pip install satadd","title":"Data Sources"},{"location":"projects/tools/#data-sources","text":"","title":"Data Sources"},{"location":"projects/tools/#earth-engine-data-catalog","text":"The Earth Engine Data Catalog host over 500+ datasets that have been ingested and a lot more actively curated for easy use. The catalog allows you to look for datasets using keywords as tags so search for water and see what you can find.","title":"Earth Engine Data Catalog"},{"location":"projects/tools/#open-california-dataset","text":"Apart from Education and Research account quota of 10,000 sqkm per month, you also have access to free and open data for all of California using the Open California project","title":"Open California Dataset"},{"location":"projects/tools/#high-resolution-settlement-layer","text":"The Connectivity Lab at Facebook released high resolution population datasets for a couple of countries these are done using high resolution training data at 0.5 m resolution and can be used to understand urban density and movement. This is a 3band product where based on information from Center for International Earth Science Information Network(CIESIN) . I have ingested 13 High Resolution Settlement Layers(HRSL) layers into Google Earth Engine for you to use during the period of the hackathon. You can find the dataset here var hrsl = ee . ImageCollection ( users/samapriya/hrsl ) print ( hrsl )","title":"High Resolution Settlement Layer"},{"location":"projects/tools/#microsoft-computer-generated-building-footprints-for-the-united-states-and-open-ai-for-earth","text":"In June Microsoft released 125 million Footprints in the US as Open Data, US Buildings Footprints . Though considering the segmentation and classification are performed for Building rooftops as is a better indicator of rooftoop edges. That being said this was also when the discussion and interest in Microsoft Cognitive Toolkit CNTK . You can find more about the research including the papers and the resnet base on their github page Another important and interesting project was the Land Cover Mapping using CNTK and the GeoAI DataScience VM . Head to the [main website]","title":"Microsoft: Computer generated building footprints for the United States and Open AI for Earth"},{"location":"projects/tools/#microsoft-ai-for-earth","text":"I am including the series of links and useful follow ups posted earlier on Slack to have easy reference Azure Setup Azure AI School Azure Congnitive Services Azure VM Services Student Signup Azure AI school Azure cognitive Services Azure Data Science VM Free Account Setup Azure AI Demo Azure cognitive services demo Azure Geo Data Science VM Azure Doc AI Lab Azure Deep Learning VM Azure SDK and Tools Azure Machine Learning and AI Azure Machine Learning Overview Azure ML Sample Datasets Deep Learning and AI Frameworks Azure ML and data science Tools Samples and Walkthroughs Azure AI Gallery for community samples","title":"Microsoft: AI for Earth"},{"location":"projects/tools/#satellogic-open-data","text":"Head over to Satellogic's data explorer and use the username and password provided to you during the hackathon to access their multispectral and hyperspectral datasets.","title":"Satellogic Open Data"},{"location":"projects/tools/#tools","text":"","title":"Tools"},{"location":"projects/tools/#planet-cli","text":"The planet CLI as mentioned earlier allows you to batch activate, search, download imagery among other things interact with Planet Data API directly. You can find it here or try pip install planet","title":"Planet CLI"},{"location":"projects/tools/#planet-notebooks","text":"Planet Labs holds and hosts plenty of jupyter notebooks of you to be able to download, use and analyze Planet data.","title":"Planet notebooks"},{"location":"projects/tools/#earth-engine-python-installation","text":"You can access earthengine using python rather than javascript for batch processing. Find installation instructions here","title":"Earth Engine Python Installation"},{"location":"projects/tools/#earth-engine-cli","text":"This is updated quite frequently earthengine and new releases are released on pypi","title":"Earth Engine CLI"},{"location":"projects/tools/#satellogic-open-impact","text":"Satellogic maintains an open impact repository that holds tutorials to access, download and process data along with introduction to Telluric for analysis. You can find it here","title":"Satellogic Open Impact"},{"location":"projects/tools/#satadd-satellite-data-download-addon","text":"I wrote tool a few days back with the idea to harmonize easy access to data that are made available from public and private open data endpoints. This will allow you to download , Planet Labs data, Satellogic Data, query and search Digital Globe data , and query and download Earth Engine imagery as neeeded. You can find the tool here or pip install satadd","title":"satadd: Satellite Data Download Addon"}]}